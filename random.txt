/**
 *@author Akshat Jain
 */

import java.io.IOException;
import java.net.HttpURLConnection;
import java.net.URL;


public class HealthCheck {
    public static void main(String args[]) throws Exception {

        String[] hostList = { "http://crunchify.com", "http://yahoo.com", "http://www.ebay.com",
                "https://google.com",
                "http://www.example.co","https://www.amazon.com", "https://paypal.com",
                "http://bing.com/", "http://techcrunch.com/", "http://mashable.com/",
                "https://thenextweb.com/", "http://wordpress.com/",
                "http://wordpress.org/", "http://example.com/", "http://sjsu.edu/",
                "https://ebay.co.uk/", "http://google.co.uk/", "http://wikipedia.org/" };

        for (int i = 0; i < hostList.length; i++) {

            String url = hostList[i];
            getStatus(url);

        }

        System.out.println("Task completed...");
    }

    public static String getStatus(String url) throws IOException {

        String result = "";
        int code = 200;
        try {
            URL siteURL = new URL(url);
            HttpURLConnection connection = (HttpURLConnection) siteURL.openConnection();
            connection.setRequestMethod("GET");
            connection.setConnectTimeout(3000);
            connection.connect();

            code = connection.getResponseCode();
            if (code == 200) {
                result = "-> Green <-\t" + "Code: " + code;
                ;
            } else {
                result = "-> Yellow <-\t" + "Code: " + code;
            }
        } catch (Exception e) {
            result = "-> Red <-\t" + "Wrong domain - Exception: " + e.getMessage();
        }
        System.out.println(url + "\t\tStatus:" + result);
        return result;
    }
}

public class EditDistance {

    public int editDistanceDP(String sentence1, String sentence2) {
        String[] s1 = sentence1.split(" ");
        String[] s2 = sentence2.split(" ");
        int[][] solution = new int[s1.length + 1][s2.length + 1];

        for (int i = 0; i <= s2.length; i++) {
            solution[0][i] = i;
        }

        for (int i = 0; i <= s1.length; i++) {
            solution[i][0] = i;
        }

        int m = s1.length;
        int n = s2.length;
        for (int i = 1; i <= m; i++) {
            for (int j = 1; j <= n; j++) {
                if (s1[i - 1].equals(s2[j - 1]))
                    solution[i][j] = solution[i - 1][j - 1];
                else
                    solution[i][j] = 1
                            + Math.min(solution[i][j - 1], Math.min(solution[i - 1][j], solution[i - 1][j - 1]));
            }
        }
        return solution[s1.length][s2.length];
    }

    public static void main(String[] args) {
        String sentence1 = "first second third";
        String sentence2 = "second";
        EditDistance ed = new EditDistance();
        System.out.println("Edit Distance: " + ed.editDistanceDP(sentence1, sentence2));
    }
}
 private function nlevenshtein(s1:String, s2:String):Number {
     var tokens1:Array = s1.split(" ");
     var tokens2:Array = s2.split(" ");
     const len1:uint = tokens1.length, len2:uint = tokens2.length;
     var d:Vector.<Vector.<uint> >=new Vector.<Vector.<uint> >(len1+1);
     for(i=0; i<=len1; ++i)
        d[i] = new Vector.<uint>(len2+1);

     d[0][0]=0;

     var i:int;
     var j:int;

     for(i=1; i<=len1; ++i) d[i][0]=i; 
     for(i=1; i<=len2; ++i) d[0][i]=i;

     for(i = 1; i <= len1; ++i)
        for(j = 1; j <= len2; ++j)
           d[i][j] = Math.min( Math.min(d[i - 1][j] + 1,d[i][j - 1] + 1),
              d[i - 1][j - 1] + (tokens1[i - 1] == tokens2[j - 1] ? 0 : 1) );

     var nlevenshteinDist:Number = (d[len1][len2]) / (Math.max(len1, len2));

     return nlevenshteinDist;
  }
  
  // A school method based C++ program to  
// check if a number is prime 
#include <bits/stdc++.h> 
using namespace std; 
  
// function check whether a number  
// is prime or not 
bool isPrime(int n) 
{ 
    // Corner case 
    if (n <= 1) 
        return false; 
  
    // Check from 2 to n-1 
    for (int i = 2; i < n; i++) 
        if (n % i == 0) 
            return false; 
  
    return true; 
} 
  
// Driver Program 
int main() 
{ 
    isPrime(11) ? cout << " true\n" :  
                  cout << " false\n"; 
    return 0; 
} 



// A optimised program to find the  
// number of digits in a factorial 
#include <bits/stdc++.h> 
using namespace std; 
  
// Returns the number of digits present  
// in n! Since the result can be large 
// long long is used as return type 
long long findDigits(int n) 
{ 
    // factorial of -ve number  
    // doesn't exists 
    if (n < 0) 
        return 0; 
  
    // base case 
    if (n <= 1) 
        return 1; 
  
    // Use Kamenetsky formula to calculate 
    // the number of digits 
    double x = ((n * log10(n / M_E) +  
                 log10(2 * M_PI * n) / 
                 2.0)); 
  
    return floor(x) + 1; 
} 
  
// Driver Code 
int main() 
{ 
    cout << findDigits(1) << endl; 
    cout << findDigits(50000000) << endl; 
    cout << findDigits(1000000000) << endl; 
    cout << findDigits(120) << endl; 
    return 0; 
} 
